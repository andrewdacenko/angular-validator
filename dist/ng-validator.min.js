/**
 * Angular validation helper class
 * @version v0.0.1
 * @link https://github.com/andrewdacenko/ng-validator
 * @license MIT
 */
!function(e,t,r){"use strict";t.module("ngValidator",["ngValidator.message-bag","ngValidator.validator"]),t.module("ngValidator.message-bag",[]).factory("MessageBag",function(){function e(){this.errors={}}return e.prototype.add=function(e,t){this.errors[e]instanceof Array||(this.errors[e]=[]),this.errors[e].push(t)},e.prototype.hasErrors=function(){for(var e in this.errors)if(this.errors.hasOwnProperty(e))return!0;return!1},e.prototype.all=function(){return this.errors},e.prototype.has=function(e){return this.errors[e]?!0:!1},e.prototype.first=function(e){return this.has(e)?this.errors[e][0]:""},e.prototype.get=function(e){return this.has(e)?this.errors[e]:[]},e}),t.module("ngValidator.validator",["ngValidator.message-bag"]).factory("Validator",["MessageBag",function(e){function t(e,t,r){this.messages=r||{},this.data=e,this.rules=this.explodeRules(t)}function a(e){return(e+"").replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g,function(e){return e.toUpperCase()})}function i(e){return e=a((e+"").replace(/[-_]/g," ")),e.replace(/[\s]/g,"")}function s(e){return(e+"").replace(/(.)([A-Z])/g,"$1_$2").toLowerCase()}return t.prototype.defaultMessages={Required:"Field can't be blank",RequiredIf:"Field can't be blank",RequiredWith:"Field can't be blank"},t.prototype.explodeRules=function(e){for(var t in e)e[t]="string"==typeof e[t]?e[t].split("|"):e[t];return e},t.prototype.parseRules=function(e){if(r=[],-1!==e.indexOf(":")){var t=e.split(":");e=t[0];var r=this.parseParameters(e,t[1])}return{rule:i(e.trim()),parameters:r}},t.prototype.parseParameters=function(e,t){return"regex"==e.toLowerCase()?[t]:t.split(",")},t.prototype.validate=function(e,t){var r=this.parseRules(t);if(""!==r.rule){var a=this.getValue(e);this["validate"+r.rule](e,a,r.parameters)||this.addFailure(e,r.rule,r.parameters)}},t.prototype.passes=function(){this.errors=new e;for(var t in this.rules)for(var r=this.rules[t],a=0;a<r.length;a++)this.validate(t,r[a]);return!this.errors.hasErrors()},t.prototype.fails=function(){return!this.passes()},t.prototype.extend=function(e,r,a){e=i(e),t.prototype["validate"+e]=r,t.prototype.defaultMessages[e]=a||""},t.prototype.addFailure=function(e,t){var r=this.messages[e+"."+s(t)]||this.defaultMessages[t];this.errors.add(e,r)},t.prototype.getValue=function(e){return this.data[e]},t.prototype.allRequiredFails=function(e){for(var t=0;t<e.length;t++)if(this.validateRequired(e[t],this.getValue(e[t])))return!1;return!0},t.prototype.validateRequired=function(e,t){if(null===t||t===r)return!1;if("string"==typeof t){if(""===t.trim())return!1}else if(t instanceof Array){if(t.length<1)return!1}else if(t instanceof Object&&!(t instanceof Date)&&0===Object.getOwnPropertyNames(t).length)return!1;return!0},t.prototype.validateRequiredWith=function(e,t,r){return this.allRequiredFails(r)?!0:this.validateRequired(e,t)},t.prototype.validateRequiredIf=function(e,t,r){return this.getValue(r[0])===r[1]?this.validateRequired(e,t):!0},t}])}(window,angular);
//# sourceMappingURL=data:application/json;base64,